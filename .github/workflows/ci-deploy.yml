name: Build and Deploy Volaris Site

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
      
      - name: Run linter (if configured)
        run: npm run lint || echo "Linting not configured, skipping..."
        continue-on-error: true
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7

  deploy-ftp:
    name: Deploy to Namecheap via FTP
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
      
      - name: Deploy to FTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.FTP_HOST }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./dist/
          server-dir: /public_html/
          protocol: ftps
          port: 21
          log-level: verbose
          dangerous-clean-slate: false
          
  # Alternative: Deploy to VPS via SSH
  # deploy-vps:
  #   name: Deploy to VPS
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   
  #   steps:
  #     - name: Download build artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: dist
  #         path: dist/
  #     
  #     - name: Deploy to VPS via SCP
  #       uses: appleboy/scp-action@v0.1.7
  #       with:
  #         host: ${{ secrets.VPS_HOST }}
  #         username: ${{ secrets.VPS_USERNAME }}
  #         key: ${{ secrets.VPS_SSH_KEY }}
  #         source: "dist/*"
  #         target: "/var/www/volaris"
  #         strip_components: 1
  #     
  #     - name: Restart web server
  #       uses: appleboy/ssh-action@v1.0.3
  #       with:
  #         host: ${{ secrets.VPS_HOST }}
  #         username: ${{ secrets.VPS_USERNAME }}
  #         key: ${{ secrets.VPS_SSH_KEY }}
  #         script: |
  #           cd /var/www/volaris
  #           docker-compose up -d --build

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
      
      - name: Create release archive
        run: |
          tar -czf volaris-site-${{ github.sha }}.tar.gz dist/
          zip -r volaris-site-${{ github.sha }}.zip dist/
      
      - name: Generate release tag
        id: tag
        run: |
          echo "tag=release-$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: Release ${{ steps.tag.outputs.tag }}
          body: |
            Automated release from commit ${{ github.sha }}
            
            ## Deployment Instructions
            1. Download either the `.tar.gz` or `.zip` file
            2. Extract the contents
            3. Upload the `dist/` folder contents to your web host's public directory
            
            ## Docker Deployment
            Alternatively, pull and run the Docker image (if Docker build is configured)
          files: |
            volaris-site-${{ github.sha }}.tar.gz
            volaris-site-${{ github.sha }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
